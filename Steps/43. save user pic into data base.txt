1.instagram\src\components\screens\Profile.js

import React,{ useState, useEffect,useContext } from 'react'
import { UserContext } from '../../App'

const Profile = () => {
    const [mypic,setMypic]=useState([])

    const [image, setImage] = useState("")

    const {state,dispatch} = useContext(UserContext)
    console.log("state",state)

    useEffect(()=>{
        fetch('/mypost',{
            headers:{
                "Authorization":"Bearer "+localStorage.getItem("jwt")
            }
        }).then(res=>res.json())
        .then(result=>{
            console.log("result",result)
            setMypic(result.result)
        })
     },[])

useEffect(()=>{
    if(image){
        const data = new FormData()
        data.append('file', image)
        data.append('upload_preset', "insta-clone")
        data.append('cloud_name', "gourab")
        const res = fetch("https://api.cloudinary.com/v1_1/gourab/image/upload", {
            method: "post",
            body: data
        })
        .then(res=>res.json())
        .then(data=>{
            console.log("data",data)
            
            fetch('/updatepic',{
               method:"put",
               headers:{
                   "Content-Type":"application/json",
                   "Authorization":"Bearer "+localStorage.getItem("jwt")
               },
               body:JSON.stringify({
                   pic:data.url
               })
           }).then(res=>res.json())
           .then(result=>{
               console.log("result",result)
               localStorage.setItem("user",JSON.stringify({...state,pic:result.pic}))
               dispatch({type:"UPDATEPIC",payload:result.pic})
    
           })
       
        })
        .catch(err=>{
            console.log(err)
        })
       }
    },[image])


    const updatePhoto = (file)=>{
        setImage(file)
    }
    return (
        <div style={{maxWidth:"80%",margin:"0px auto"}}>
            <div style={{
                display: 'flex',
                justifyContent:'space-around',
                margin:'30px auto',
                width:'70%', height: 'auto', align:'center',
                borderBottom:'1px solid gray'
                
            }}>
                <div>
                    <img className="img-border" src={state?state.pic:"loading"} style={{ width: '160px', height: '160px', borderRadius: "80px" }} />

                    <div className="file-field input-field">
                        <div className="btn #64b5f6 blue darken-1">
                            <span>Upload pic</span>
                            <input type="file" onChange={(e) => updatePhoto(e.target.files[0])} />
                        </div>
                        <div className="file-path-wrapper">
                            <input className="file-path validate" type="text" />
                        </div>
                    </div>

                </div>
                <div>
                    <h4>{state?state.name:"loading"}</h4>
                    <h5>{state?state.email:"loading"}</h5>
                    <div style={{ display: 'flex',justifyContent:"space-between",width:"108%"}}>
                       <h6>{mypic.length} posts</h6>
                       <h6>{state?state.followers.length:"0"} followers</h6>
                       <h6>{state?state.following.length:"0"} following</h6>
                    </div>
                </div>
            </div>
            <div className="gallery">
                {
                    mypic.map(item=>{
                        return(
                            <img className="item" src={item.photo} key={item._id}/>
                        )
                    })
                }
            

            </div>
        </div>
    )
}

export default Profile



2.instagram\src\components\reducer\userReducer.js

export const initialState =null


export const reducer=(state,action)=>{
    if(action.type ==="USER"){
        //console.log("action.payload",action.payload)
        return action.payload
    }
    if(action.type ==="CLEAR"){
        return null;
    }
    if(action.type==="UPDATE"){
        return {
            ...state,
            followers:action.payload.followers,
            following:action.payload.following
        }
    }
    if(action.type=="UPDATEPIC"){
        return {
            ...state,
            pic:action.payload
        }
    }

    return state
}


3.server\routes\user.js


const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const requireLogin = require('../middleware/requiredLogin')
const Post =  mongoose.model("Post")
const User = mongoose.model("User")

router.get('/user/:id', requireLogin, (req, res) =>{
    console.log(req.params.id)
    User.findOne({_id: req.params.id})
    .select("-password")
    .then(user =>{
        Post.find({postedBy: req.params.id})
        .populate("postedBy","_id name")
        .exec((err, posts) =>{
            if(err) return res.status(422).json({error: err});
            res.json({user,posts});

        })
    })
    .catch(err =>console.error(err));
})


router.put('/follow',requireLogin,(req,res)=>{
    User.findByIdAndUpdate(req.body.followId,{
        $push:{followers:req.user._id}
    },{
        new:true
    },(err,result)=>{
        if(err){
            return res.status(422).json({error:err})
        }
      User.findByIdAndUpdate(req.user._id,{
          $push:{following:req.body.followId}
          
      },{new:true}).select("-password").then(result=>{
          res.json(result)
      }).catch(err=>{
          return res.status(422).json({error:err})
      })

    }
    )
})



router.put('/unfollow',requireLogin,(req,res)=>{
    User.findByIdAndUpdate(req.body.unfollowId,{
        $pull:{followers:req.user._id}
    },{
        new:true
    },(err,result)=>{
        if(err){
            return res.status(422).json({error:err})
        }
      User.findByIdAndUpdate(req.user._id,{
          $pull:{following:req.body.unfollowId}
          
      },{new:true}).select("-password").then(result=>{
          res.json(result)
      }).catch(err=>{
          return res.status(422).json({error:err})
      })

    }
    )
})

***************************
router.put('/updatepic',requireLogin,(req,res)=>{
    User.findByIdAndUpdate(req.user._id,{$set:{pic:req.body.pic}},{new:true},
    (err,result)=>{
        if (err) {
            return res.status(422).json({err:"pic can not post"})
        }
        res.json(result)
    })
   
    
})

********




module.exports = router